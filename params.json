{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Run minitest suites after your Chef recipes to check the status of your system.","body":"# Minitest Chef Handler\r\n\r\nRun minitest suites after your Chef recipes to check the status of your system.\r\n\r\n# Installation\r\n\r\n```\r\n$ gem install minitest-chef-handler\r\n```\r\n\r\n## Usage\r\n\r\nAdd the report handler to your client.rb or solo.rb file:\r\n\r\n```ruby\r\nrequire 'minitest-chef-handler'\r\n\r\nreport_handlers << MiniTest::Chef::Handler.new\r\n```\r\n\r\n### Test cases\r\n\r\nWrite your tests as normal MiniTest cases extending from MiniTest::Chef::TestCase:\r\n\r\n```ruby\r\nclass TestNginx < MiniTest::Chef::TestCase\r\n  def test_config_file_exist\r\n    assert File.exist?('/etc/nginx.conf')\r\n  end\r\nend\r\n```\r\n\r\nYou still have access to Chef's `run_status`, `node` and `run_context` from your tests:\r\n\r\n```ruby\r\nclass TestNginx < MiniTest::Chef::TestCase\r\n  def test_succeed\r\n    assert run_status.success?\r\n  end\r\nend\r\n```\r\n\r\n### Spec cases\r\n\r\nWrap your descriptions with a class extending from MiniTest::Chef::Spec:\r\n\r\n```ruby\r\nclass NginxSpec < MiniTest::Chef::Spec\r\n  describe 'configuration' do\r\n    it 'creates nginx.conf'\r\n  end\r\nend\r\n```\r\n\r\nUse the prefix `recipe::` in your descriptions:\r\n\r\n```ruby\r\ndescribe \"recipe::nginx::configuration\" do\r\n  it 'creates nginx.conf'\r\nend\r\n```\r\n\r\nOr use `describe_recipe` to define your specs:\r\n\r\n```ruby\r\ndescribe_recipe \"nginx::configuration\" do\r\n  it 'creates nginx.conf'\r\nend\r\n```\r\n\r\nYou still have access to Chef's `run_status`, `node` and `run_context` from your specs:\r\n\r\n```ruby\r\ndescribe_recipe 'nginx:configuration' do\r\n  it 'installs version 1.0.15' do\r\n    node[:nginx][:version].should == '1.0.15'\r\n  end\r\nend\r\n```\r\n\r\n### Custom assertions\r\n\r\nBy including `MiniTest::Chef::Resources` and `MiniTest::Chef::Assertions` you\r\ncan also make assertions like these:\r\n\r\n```ruby\r\nfile(\"/etc/fstab\").must_have(:mode, \"644\")\r\npackage(\"less\").must_be_installed\r\nservice(\"chef-client\").must_be_running\r\n```\r\n\r\nThe resources supported are: `cron`, `directory`, `file`, `group`, `ifconfig`,\r\n`link`, `mount`, `package`, `service` and `user`.\r\n\r\nFor example usage see the tests under the `examples/spec_examples` directory.\r\n\r\n## Further configuration\r\n\r\nThese are the options the handler accepts:\r\n\r\n* :path => where your test files are, './test/test_*.rb' by default\r\n* :filter => filter test names on pattern\r\n* :seed => set random seed\r\n* :verbose => show progress processing files.\r\n\r\nExample:\r\n\r\n```ruby\r\nhandler = MiniTest::Chef::Handler.new({\r\n  :path    => './cookbooks/test/*_test.rb',\r\n  :filter  => 'foo',\r\n  :seed    => srand,\r\n  :verbose => true})\r\n\r\nreport_handlers << handler\r\n```\r\n\r\n## Automatic tests detection\r\n\r\nMiniTest-chef-hander collects test paths based in the recipes ran.\r\nIt loads the tests based in the name of the cookbook and the name of the recipe.\r\nThe tests must be under the cookbooks directory.\r\n\r\nExamples:\r\n\r\nIf the seen recipes includes the recipe \"foo\" we try to load tests from:\r\n\r\n```\r\ncookbooks/foo/tests/default_test.rb\r\ncookbooks/foo/tests/default/*_test.rb\r\n\r\ncookbooks/foo/specs/default_spec.rb\r\ncookbooks/foo/specs/default/*_spec.rb\r\n```\r\n\r\nIf the seen recipes includes the recipe \"foo::install\" we try to load tests from:\r\n\r\n```\r\ncookbooks/foo/tests/install_test.rb\r\ncookbooks/foo/tests/install/*_test.rb\r\n\r\ncookbooks/foo/specs/install_spec.rb\r\ncookbooks/foo/specs/install/*_spec.rb\r\n```\r\n\r\n## Automatic chef failure\r\n\r\nIf the tests detect any failure, the handler raises an error to abort the\r\nChef execution. This error can be captured by any other exception handler\r\nand be treated like any other error in the Chef execution.\r\n\r\n## Chef server distribution\r\n\r\nThe instructions abow have described how to use it in a Chef solo installation. If you want to distribute the handler to your Chef server check either the chef_handler cookbooks in the examples or [minitest-handler-cookbook](https://github.com/btm/minitest-handler-cookbook).\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 David Calavera. See LICENSE for details.\r\n","name":"Minitest-chef-handler"}